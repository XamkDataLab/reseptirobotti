import streamlit as st
from scholar.lens_metadata import *
from patents.lens_metadata import *
from utils.llm import *

st.title('ü§ñ üë®‚Äçüç≥ ')
tab1, tab2, tab3, tab4 = st.tabs(["Haku", "Ohjeita", "Tietoja", "Visualisointeja"])

initialize_session_state()

with tab1:
    search_type = st.radio("Valitse hakukohde", ('Julkaisut', 'Patentit'))

    with st.form("query_form"):
        start_date = st.text_input("Aloitusp√§iv√§ (YYYY-MM-DD)", "2024-01-01")
        end_date = st.text_input("Lopetusp√§iv√§ (YYYY-MM-DD)", "2024-08-01")
        query = st.text_area("Kirjoita kysely")
        
        if search_type == 'Patentit':
            class_cpc_prefix = st.text_input("CPC luokitus tai sen alku (valinnainen)", "")
        
        submit_button = st.form_submit_button("Hae data")

        if submit_button:
            token = token
            if search_type == 'Julkaisut':
                results = get_publication_data_with_query(start_date, end_date, query, token)
                st.write(f"Julkaisu-osumien m√§√§r√§: {len(results['data'])}")
                st.session_state.df = publication_table(results)
                st.session_state.fs = fields_of_study_table(results)
                st.session_state.authors = author_table(results)   

            elif search_type == 'Patentit':
                results = get_patent_data_with_query(start_date, end_date, query, token, class_cpc_prefix)
                st.write(f"Patenttien osumien m√§√§r√§: {len(results)}")
                patents= patents_table(results)
                applicants = applicants_table(results)
                c=cpc_classifications_table(results)
                cpc_classes = make_cpc(c, 'cpc_titles.json')
                st.dataframe(patents)
                st.dataframe(applicants)
                st.dataframe(cpc_classes)
                
    if st.session_state.df is not None and st.session_state.fs is not None:
        selected_fields = st.multiselect("Valitse tutkimusalueet", options=st.session_state.fs['field_of_study'].unique())
        filtered_df = filter_dataframe(st.session_state.df, st.session_state.fs, selected_fields)
        
        sort_by = st.selectbox("J√§rjest√§ tulokset", options=["date_published", "references_count"])
        filtered_df = filtered_df.sort_values(by=sort_by, ascending=False)
    
        for index, row in filtered_df.head(100).iterrows():
            with st.container():
                link_html = f"<a href='{row['link']}' target='_blank' class='custom-link'>{row['title']}</a>"
                st.markdown(css_style, unsafe_allow_html=True) 
                st.markdown(link_html, unsafe_allow_html=True)
                col1, col2 = st.columns(2)

                with col1:
                    st.write(f"**Published on:** {row['date_published']}")
                    st.write(f"**References Count:** {row['references_count']}")

                with col2:
                    st.write(f"**Publisher:** {row['source_publisher']}")
                    st.write(row['source_title'])

                st.markdown("---")
                
    dfp = st.session_state.df
    st.dataframe(dfp)
    st.subheader("Boolean-kyselyiden aputy√∂kalu")  
    help_query = st.text_area("Kirjoita t√§h√§n mit√§ olet etsim√§ss√§ ja kielimalli leipoo siit√§ boolean-kyselyn (toivottavasti)")
    llm_button = st.button("Auta!")

    if llm_button:
            if help_query:  
                response = get_LLM_response(help_query, task_description1, system_prompt1)  
                if response:
                    st.write(response)
                else:
                    st.error("Error: No response from LLM.")
            else:
                st.write("Kerro tukikyselykent√§ss√§ mit√§ haluat etsi√§ ja min√§ ehdotan.")
    
    
with tab2:
    st.header("Ohjeet boolean-kyselyn muodostamiseen")
    st.markdown("""
    - **AND**: Varmistaa, ett√§ molemmat termit l√∂ytyv√§t hakutuloksista. T√§m√§ operaattori on hy√∂dyllinen, kun haluat rajoittaa hakutuloksia siten, ett√§ ne sis√§lt√§v√§t kaikki annetut hakutermit. Esimerkiksi kysely `omena AND appelsiini` palauttaa vain ne dokumentit, joissa esiintyv√§t sek√§ sana "omena" ett√§ sana "appelsiini".
    
    - **OR**: Jompikumpi termeist√§ (tai molemmat) l√∂ytyv√§t hakutuloksista. T√§m√§ operaattori on hy√∂dyllinen laajentamaan hakua, kun etsit√§√§n dokumentteja, jotka sis√§lt√§v√§t ainakin toisen hakutermeist√§. Esimerkki: `omena OR appelsiini` palauttaa dokumentit, joissa on joko "omena", "appelsiini" tai molemmat.
    
    - **NOT**: Ensimm√§inen termi sis√§ltyy hakuun, ja toinen termi j√§tet√§√§n pois. T√§m√§ operaattori auttaa poistamaan hakutuloksista ne dokumentit, jotka sis√§lt√§v√§t ei-toivotun termin. Esimerkki: `omena NOT appelsiini` palauttaa dokumentit, jotka sis√§lt√§v√§t sanan "omena", mutta eiv√§t sanaa "appelsiini".
    
    - **Sulkeiden k√§ytt√∂** (Parentheses): K√§yt√§ sulkeita ryhmitt√§m√§√§n termej√§ ja hallitsemaan operaatioiden j√§rjestyst√§, mik√§ on t√§rke√§√§ monimutkaisten kyselyjen rakentamisessa. Esimerkki: `(omena OR appelsiini) AND trooppinen` varmistaa, ett√§ hakutulokset sis√§lt√§v√§t joko "omenan" tai "appelsiinin" ja lis√§ksi sanan "trooppinen".
    
    - **Korvausmerkit** (Wildcards): K√§yt√§ `*` usean merkin korvaamiseen ja `?` yhden merkin korvaamiseen. T√§m√§ on hy√∂dyllist√§, kun haet sanoja, jotka alkavat tai p√§√§ttyv√§t tiettyyn kirjainsarjaan tai kun et ole varma oikeinkirjoituksesta. Esimerkki: `appl*` l√∂yt√§√§ sanat kuten apple, application, jne.
    
    - **Fraasihaku** (Phrase Search): K√§yt√§ lainausmerkkej√§ tarkan ilmaisun hakemiseen. T√§m√§ on erityisen hy√∂dyllist√§, kun etsit tiettyj√§ ilmaisuja tai kiinteit√§ sanayhdistelmi√§. Esimerkki: `"trooppinen hedelm√§"` palauttaa vain ne dokumentit, joissa esiintyv√§t t√§m√§ tarkka ilmaisu.
    
    - **L√§hell√§ haku** (Proximity Search): K√§yt√§ `~` merkin j√§lkeen numeroa osoittamaan, kuinka l√§hell√§ toisiaan sanat voivat olla dokumentissa. T√§m√§ on eritt√§in hy√∂dyllinen, kun haluat l√∂yt√§√§ dokumentteja, joissa kaksi sanaa esiintyv√§t tietyll√§ et√§isyydell√§ toisistaan, mik√§ osoittaa vahvempaa kontekstuaalista yhteytt√§. Esimerkki: `"omena mehu"~10` palauttaa dokumentit, joissa sanat "omena" ja "mehu" esiintyv√§t enint√§√§n kymmenen sanan p√§√§ss√§ toisistaan. T√§m√§ voi auttaa l√∂yt√§m√§√§n tarkempaa tietoa siit√§, miten n√§m√§ termit liittyv√§t toisiinsa kontekstissa.
    
    """, unsafe_allow_html=True)

with tab3:
    st.markdown("Made in XAMK")

with tab4:
    st.markdown("Haku-sivun `session_state` dataframeista tehtyj√§ kuvia")

